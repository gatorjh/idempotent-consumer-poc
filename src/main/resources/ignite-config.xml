<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
       http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd">

	<bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig">
		<property name="poolName" value="springHikariCP" />
		<property name="jdbcUrl" value="${spring.datasource.url}" />
		<property name="maximumPoolSize" value="${spring.datasource.hikari.maximum-pool-size}" />
		<property name="idleTimeout" value="${spring.datasource.hikari.idle-timeout}" />
		<property name="registerMbeans" value="${spring.datasource.hikari.register-mbeans}" />

		<property name="dataSourceProperties">
			<props>
				<prop key="clientProgramName">${spring.datasource.hikari.data-source-properties.clientProgramName}</prop>
				<prop key="user">${spring.datasource.username}</prop>
				<prop key="password">${spring.datasource.password}</prop>
			</props>
		</property>
	</bean>

	<!-- HikariCP configuration -->
	<bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource"
		destroy-method="close">
		<constructor-arg ref="hikariConfig" />
	</bean>

	<bean
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:application.properties</value>
			</list>
		</property>
	</bean>

	<bean id="ignite.cfg" class="org.apache.ignite.configuration.IgniteConfiguration">
		<!-- Set to true to enable distributed class loading for examples, default 
			is false. -->
		<property name="peerClassLoadingEnabled" value="false" />
		<property name="clientMode" value="false" />

		<!-- Explicitly configure TCP discovery SPI to provide list of initial 
			nodes. -->
		<property name="discoverySpi">
			<bean class="org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi">
				<property name="ipFinder">
					<!-- Ignite provides several options for automatic discovery that can 
						be used instead os static IP based discovery. For information on all options 
						refer to our documentation: http://apacheignite.readme.io/docs/cluster-config -->
					<!-- Uncomment static IP finder to enable static-based discovery of 
						initial nodes. -->
					<!--<bean class="org.apache.ignite.spi.discovery.tcp.ipfinder.vm.TcpDiscoveryVmIpFinder"> -->
					<bean
						class="org.apache.ignite.spi.discovery.tcp.ipfinder.multicast.TcpDiscoveryMulticastIpFinder">
						<property name="addresses">
							<list>
								<!-- In distributed environment, replace with actual host IP address. -->
								<value>127.0.0.1:47500..47509</value>
							</list>
						</property>
					</bean>
				</property>
			</bean>
		</property>

		<property name="cacheConfiguration">
			<list>
				<bean class="org.apache.ignite.configuration.CacheConfiguration">
					<property name="name" value="idempotentRepositoryCache"></property>

					<!-- Enable readThrough and writeThrough -->
					<property name="readThrough" value="true"></property>
					<property name="writeThrough" value="true"></property>

					<!-- https://apacheignite.readme.io/docs/persistent-store#section-write-behind-caching -->
					<property name="writeBehindEnabled" value="false"></property>

					<!-- https://apacheignite.readme.io/docs/cache-modes -->
					<property name="cacheMode" value="PARTITIONED" />
					<!-- https://apacheignite.readme.io/docs/primary-and-backup-copies -->
					<property name="backups" value="0" />

					<!-- PRIMARY_SYNC is the default mode. Client node will wait for write or commit to complete on primary node, but will not wait for backups to be updated. -->
					<!-- See https://apacheignite.readme.io/docs/primary-and-backup-copies#section-synchronous-and-asynchronous-backups -->
					<property name="writeSynchronizationMode" value="PRIMARY_SYNC"/>

					<!-- Set cacheStoreFactory -->
					<property name="cacheStoreFactory">
						<bean class="javax.cache.configuration.FactoryBuilder"
							factory-method="factoryOf">
							<constructor-arg value="com.poc.ignite.store.IdempotentStore"></constructor-arg>
						</bean>
					</property>
					<property name="queryEntities">
						<list>
							<bean class="org.apache.ignite.cache.QueryEntity">
								<property name="keyType" value="java.lang.String"></property>
								<property name="valueType" value="java.lang.Integer"></property>
								<property name="fields">
									<map>
										<entry key="key" value="java.lang.String"></entry>
										<entry key="value" value="java.lang.Integer"></entry>
									</map>
								</property>
							</bean>
						</list>
					</property>
				</bean>

				<bean class="org.apache.ignite.configuration.CacheConfiguration">
					<property name="name" value="idempotentRepositoryBlobCache"></property>

					<!-- Enable readThrough and writeThrough -->
					<property name="readThrough" value="true"></property>
					<property name="writeThrough" value="true"></property>

					<!-- https://apacheignite.readme.io/docs/persistent-store#section-write-behind-caching -->
					<property name="writeBehindEnabled" value="false"></property>

					<!-- https://apacheignite.readme.io/docs/cache-modes -->
					<property name="cacheMode" value="PARTITIONED" />
					<!-- https://apacheignite.readme.io/docs/primary-and-backup-copies -->
					<property name="backups" value="0" />

					<!-- PRIMARY_SYNC is the default mode. Client node will wait for write or commit to complete on primary node, but will not wait for backups to be updated. -->
					<!-- See https://apacheignite.readme.io/docs/primary-and-backup-copies#section-synchronous-and-asynchronous-backups -->
					<property name="writeSynchronizationMode" value="PRIMARY_SYNC"/>

					<!-- Set cacheStoreFactory -->
					<property name="cacheStoreFactory">
						<bean class="javax.cache.configuration.FactoryBuilder"
							factory-method="factoryOf">
							<constructor-arg value="com.poc.ignite.store.IdempotentBlobStore"></constructor-arg>
						</bean>
					</property>
					<property name="queryEntities">
						<list>
							<bean class="org.apache.ignite.cache.QueryEntity">
								<property name="keyType" value="java.lang.String"></property>
								<property name="valueType" value="java.lang.Integer"></property>
								<property name="fields">
									<map>
										<entry key="key" value="java.lang.String"></entry>
										<entry key="value" value="java.lang.Integer"></entry>
									</map>
								</property>
							</bean>
						</list>
					</property>
				</bean>
			</list>
		</property>
	</bean>
</beans>